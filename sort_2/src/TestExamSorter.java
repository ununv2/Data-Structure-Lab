import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class TestExamSorter {
	ExamSorter e;
	
	@BeforeEach
	void setup() throws Exception {
		e = new ExamSorter();
	}
	
	@Test
	void testInsertBasic() {
		long[] data = {6930277721l, 6932185621l, 6930266621l, 6930211121l, 6930054321l};
		
		e.insert(data);
		
		for (int i = 0; i < 30; i++) {
			if (i == 0) {
				assertEquals(1, e.buckets[i].size());
				assertEquals(6930054321l, e.buckets[i].get(0));
			} else if (i == 2) {
				assertEquals(3, e.buckets[i].size());
				assertEquals(6930277721l, e.buckets[i].get(0));
				assertEquals(6930266621l, e.buckets[i].get(1));
				assertEquals(6930211121l, e.buckets[i].get(2));
			} else if (i == 21) {
				assertEquals(1, e.buckets[i].size());
				assertEquals(6932185621l, e.buckets[i].get(0));
			} else {
				assertEquals(0, e.buckets[i].size());
			}
		}
	}
	
	@Test
	void testSortBasic() {
		e.buckets[0].add(6930054321l);
		e.buckets[2].add(6930277721l);
		e.buckets[2].add(6930266621l);
		e.buckets[2].add(6930211121l);
		e.buckets[21].add(6932185621l);
		
		for (int i = 0; i < 30; i++) {
			e.sort(i);
		}
		
		for (int i = 0; i < 30; i++) {
			if (i == 0) {
				assertEquals(1, e.buckets[i].size());
				assertEquals(6930054321l, e.buckets[i].get(0));
			} else if (i == 2) {
				assertEquals(3, e.buckets[i].size());
				assertEquals(6930211121l, e.buckets[i].get(0));
				assertEquals(6930266621l, e.buckets[i].get(1));
				assertEquals(6930277721l, e.buckets[i].get(2));
			} else if (i == 21) {
				assertEquals(1, e.buckets[i].size());
				assertEquals(6932185621l, e.buckets[i].get(0));
			} else {
				assertEquals(0, e.buckets[i].size());
			}
		}
	}
	
	@Test
	void testCollectBasic() {
		e.buckets[0].add(6930054321l);
		e.buckets[2].add(6930211121l);
		e.buckets[2].add(6930266621l);
		e.buckets[2].add(6930277721l);
		e.buckets[21].add(6932185621l);
		
		long[] result = e.collect();
		
		assertEquals(5, result.length);
		assertEquals(6930054321l, result[0]);
		assertEquals(6930211121l, result[1]);
		assertEquals(6930266621l, result[2]);
		assertEquals(6930277721l, result[3]);
		assertEquals(6932185621l, result[4]);
	}
	
	@Test
	void testPerformBasic() {
		long[] data = {6930277721l, 6932185621l, 6930266621l, 6930211121l, 6930054321l};
		
		long[] result = e.perform(data);
		
		assertEquals(5, result.length);
		assertEquals(6930054321l, result[0]);
		assertEquals(6930211121l, result[1]);
		assertEquals(6930266621l, result[2]);
		assertEquals(6930277721l, result[3]);
		assertEquals(6932185621l, result[4]);
	}
	
	@Test
	void testPerformRealLife() {
		long[] data = {6931113221l,6931163721l,6930942021l,6931888221l,6931331021l,6930521521l,6932740621l,6932107221l,6932730521l,6930236721l,6931805421l,6930518621l,6932923421l,6931024221l,6932913921l,6931531721l,6930413821l,6931920021l,6930301121l,6930398521l,6930027721l,6931079821l,6931579121l,6930832421l,6932711221l,6932501221l,6930662621l,6930822321l,6930898321l,6931470421l,6932039421l,6931750321l,6931949821l,6931095521l,6931984821l,6931488021l,6931013721l,6932828821l,6931708821l,6931220621l,6931953321l,6932686221l,6931060821l,6932195321l,6932444421l,6931950321l,6932509121l,6930227721l,6931818821l,6931525021l,6930910621l,6930044521l,6931349121l,6932367421l,6931090421l,6932370421l,6931298721l,6931049121l,6932412421l,6930613721l,6931914621l,6931311821l,6930633921l,6932771521l,6930136021l,6930651821l,6930048021l,6932444921l,6931244121l,6930702421l,6932550621l,6932541321l,6931039921l,6931473221l,6931650921l,6930413421l,6932719621l,6932163821l,6932310021l,6932878121l,6930393121l,6931179621l,6931479221l,6931051921l,6930166621l,6930115421l,6930690821l,6930603821l,6931398221l,6930142421l,6931610021l,6931670121l,6932207021l,6931835421l,6932365821l,6930784721l,6930094521l,6931131621l,6930539721l,6932214221l,6930006821l,6932874421l,6932705721l,6931552021l,6932498221l,6932989621l,6932277421l,6931239521l,6931466521l,6931725321l,6932828121l,6931821421l,6930979721l,6932954421l,6930225921l,6930030121l,6931973021l,6932404921l,6931325821l,6932227921l,6930690121l,6931840421l,6930817821l,6931034521l,6931223321l,6930407121l,6931291121l,6932107121l,6932665121l,6930183921l,6930945221l,6930847021l,6930858721l,6932950021l,6931934421l,6930323521l,6932702621l,6930276421l,6931070521l,6930327921l,6931981121l,6932580021l,6932581621l,6931567721l,6930326621l,6930101021l,6932186121l,6931105321l,6932889021l,6931281921l,6932496921l,6932648421l,6931190121l,6931164721l,6932852021l,6931340121l,6930800721l,6932437221l,6931569621l,6932538621l,6931683021l,6930346821l,6932796821l,6932546021l,6932571221l,6932918221l,6932570721l,6930293221l,6932991421l,6931280521l,6930403521l,6931576321l,6931562221l,6931127321l,6932178321l,6931844421l,6931404921l,6932953821l,6930299021l,6930354321l,6931304821l,6930434021l,6931451621l,6931554121l,6930104321l,6932640721l,6932959321l,6932052421l,6932597521l,6930297721l,6931753321l,6930265621l,6931328621l,6931441321l,6930495021l,6932375321l,6932806821l,6930592721l,6932236521l,6931582221l,6932924621l,6930094921l,6931924821l,6931810721l,6930670121l,6930959321l,6931397321l,6931604321l,6930964121l,6930573421l,6932791221l,6930129021l,6930081221l,6931458021l,6931807621l,6930469921l,6931998621l,6932344021l,6931044721l,6932708021l,6931349321l,6930821821l,6931381221l,6932715121l,6930376221l,6930981921l,6930746821l,6931970321l,6932194721l,6932942221l,6932600921l,6931278921l,6932531721l,6931844721l,6931179521l,6930826821l,6931494521l,6931171121l,6930715521l,6931580821l,6931888621l,6931570321l,6932801821l,6931781621l,6930004521l,6932768321l,6932875921l,6930015521l,6930708721l,6930423521l};
		long[] expected = {6930004521l,6930006821l,6930015521l,6930027721l,6930030121l,6930044521l,6930048021l,6930081221l,6930094521l,6930094921l,6930101021l,6930104321l,6930115421l,6930129021l,6930136021l,6930142421l,6930166621l,6930183921l,6930225921l,6930227721l,6930236721l,6930265621l,6930276421l,6930293221l,6930297721l,6930299021l,6930301121l,6930323521l,6930326621l,6930327921l,6930346821l,6930354321l,6930376221l,6930393121l,6930398521l,6930403521l,6930407121l,6930413421l,6930413821l,6930423521l,6930434021l,6930469921l,6930495021l,6930518621l,6930521521l,6930539721l,6930573421l,6930592721l,6930603821l,6930613721l,6930633921l,6930651821l,6930662621l,6930670121l,6930690121l,6930690821l,6930702421l,6930708721l,6930715521l,6930746821l,6930784721l,6930800721l,6930817821l,6930821821l,6930822321l,6930826821l,6930832421l,6930847021l,6930858721l,6930898321l,6930910621l,6930942021l,6930945221l,6930959321l,6930964121l,6930979721l,6930981921l,6931013721l,6931024221l,6931034521l,6931039921l,6931044721l,6931049121l,6931051921l,6931060821l,6931070521l,6931079821l,6931090421l,6931095521l,6931105321l,6931113221l,6931127321l,6931131621l,6931163721l,6931164721l,6931171121l,6931179521l,6931179621l,6931190121l,6931220621l,6931223321l,6931239521l,6931244121l,6931278921l,6931280521l,6931281921l,6931291121l,6931298721l,6931304821l,6931311821l,6931325821l,6931328621l,6931331021l,6931340121l,6931349121l,6931349321l,6931381221l,6931397321l,6931398221l,6931404921l,6931441321l,6931451621l,6931458021l,6931466521l,6931470421l,6931473221l,6931479221l,6931488021l,6931494521l,6931525021l,6931531721l,6931552021l,6931554121l,6931562221l,6931567721l,6931569621l,6931570321l,6931576321l,6931579121l,6931580821l,6931582221l,6931604321l,6931610021l,6931650921l,6931670121l,6931683021l,6931708821l,6931725321l,6931750321l,6931753321l,6931781621l,6931805421l,6931807621l,6931810721l,6931818821l,6931821421l,6931835421l,6931840421l,6931844421l,6931844721l,6931888221l,6931888621l,6931914621l,6931920021l,6931924821l,6931934421l,6931949821l,6931950321l,6931953321l,6931970321l,6931973021l,6931981121l,6931984821l,6931998621l,6932039421l,6932052421l,6932107121l,6932107221l,6932163821l,6932178321l,6932186121l,6932194721l,6932195321l,6932207021l,6932214221l,6932227921l,6932236521l,6932277421l,6932310021l,6932344021l,6932365821l,6932367421l,6932370421l,6932375321l,6932404921l,6932412421l,6932437221l,6932444421l,6932444921l,6932496921l,6932498221l,6932501221l,6932509121l,6932531721l,6932538621l,6932541321l,6932546021l,6932550621l,6932570721l,6932571221l,6932580021l,6932581621l,6932597521l,6932600921l,6932640721l,6932648421l,6932665121l,6932686221l,6932702621l,6932705721l,6932708021l,6932711221l,6932715121l,6932719621l,6932730521l,6932740621l,6932768321l,6932771521l,6932791221l,6932796821l,6932801821l,6932806821l,6932828121l,6932828821l,6932852021l,6932874421l,6932875921l,6932878121l,6932889021l,6932913921l,6932918221l,6932923421l,6932924621l,6932942221l,6932950021l,6932953821l,6932954421l,6932959321l,6932989621l,6932991421l};
		long[] result = e.perform(data);
		
		assertEquals(250, result.length);
		
		for (int i = 0; i < 250; i++) {
			assertEquals(expected[i], result[i]);
		}
	}
	
	
}
