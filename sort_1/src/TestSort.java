import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

public class TestSort {
	
	@Test
	void testEmpty() {
		int[] data = {};
		
		Sort.sort(data, (Integer a, Integer b) -> {
			if (a < b) return -1;
			if (a > b) return 1;
			return 0;
		});
		
		assertEquals(0, data.length);
	}
	
	@Test
	void testAscendingNormal() {
		int[] data = {18, 3, 10, 13, 17, 2, 4, 7, 1, 14};
		
		Sort.sort(data, (Integer a, Integer b) -> {
			if (a < b) return -1;
			if (a > b) return 1;
			return 0;
		});
		
		int[] ans = {1, 2, 3, 4, 7, 10, 13, 14, 17, 18};
		
		assertEquals(10, data.length);
		for (int i = 0; i < ans.length; i++) {
			assertEquals(ans[i], data[i]);
		}
	}
	
	@Test
	void testAscendingComplex() {
		int[] data = {59,611,752,6,-429,105,153,67,830,621,-550,-211,-62,419,793,-249,167,203,168,570,-348,478,886,432,268,-192,-635,-570,-981,956,415,734,-957,399,248,244,-837,-583,456,346,802,912,-348,944,-533,-608,41,296,-995,-467,961,460,-475,708,526,139,-774,-748,-403,-827,822,-563,938,-891,-128,910,-1000,-751,-406,-842,-951,-247,-243,590,153,-183,-810,-375,385,-623,-866,733,-102,614,752,71,755,-647,-587,-841,-891,814,-848,116,750,689,61,-856,682,-856,154,768,250,-893,-604,-278,296,-710,463,732,-394,481,781,-479,-365,-341,-188,784,-894,-51,259,188,-819,-489,-149,-671,-863,-974,136,-951,-548,-480,-320,-707,-747,193,78,-45,-534,-741,-780,-122,-377,638,-350,-712,694,604,348,-116,920,923,59,-445,-700,-775,638,293,-248,683,227,-882,-771,737,-356,344,-550,-188,118,298,497,421,-625,179,55,541,745,-552,198,-721,667,177,513,-213,396,166,316,617,-557,-644,-200,477,858,287,-596,815,121,-714,263,-672,-333,-733,481,3,453,-344,1,587,755,959,-686,8,-93,-745,-674,186,417,462,-960,727,477,-874,-530,885,-383,413,872,-873,-936,79,-711,-857,-266,516,323,69,103,546,401,-280,644,-566,-6,-906,432,-411,-233,624,-103,344,-503,887,291,-896,506,-888,131,872,-306,270,749,539,-594,-334,-999,954,-461,-758,545,901,-935,256,-435,-811,-893,-565,334,-648,695,417,-645,-481,704,346,636,935,851,892,-269,-784,911,598,376,-253,208,-619,-221,-668,-166,157,-115,9,-739,103,-946,-679,-954,263,627,233,648,211,-225,371,-549,-259,405,238,808,582,590,654,535,-666,-116,-66,342,811,302,-801,52,-177,-98,2,503,-45,194,883,56,643,-956,-624,409,-734,386,-835,-89,-822,840,-849,-870,576,264,179,-663,622,-723,-892,154,-494,898,808,11,-535,-940,910,-386,982,177,-389,717,-421,-604,400,778,-339,-315,-9,-757,-902,491,517,-483,-353,-76,-144,974,513,635,-954,-980,-952,123,137,443,-644,-912,-26,352,-742,-661,-32,771,396,-559,479,-290,-434,517,857,-418,821,-265,-997,-575,718,319,-927,776,-686,674,-67,886,-697,-213,337,802,427,-2,211,-312,147,758,330,-828,-314,456,850,236,-736,-699,725,181,93,-148,-523,766,-254,-350,-437,616,-190,95,-5,882,401,591,-339,439,108,-410,-711,-136,458,395,794,4,-738,-762,692,-170,-336,-931,-266,-642,-760,-862,133,-299,235,636,-224,838,-595,94,46,768,-635,838,233,-220,571,236,-345,-556,703,540,-607,948,74,394,635,-461,933,262,-412,737,524,-486,-772,-479,-801,903,882,602,445,733,684,-661,-458,-98,231,-730,676,-767,83,27,659,-419,-544,-475,120,-157,63,513,399,396,299,-76,-195,537,889,-93,-516,907,95,-322,896,890,813,710,182,-467,260,-531,834,228,-351,79,-969,392,936,218,99,-640,-755,-969,-107,-778,-43,530,-593,992,-438,383,874,426,-994,-159,-661,220,-489,697,148,-663,-612,-132,256,763,-572,-135,653,-893,-900,-225,67,-148,-917,558,-937,-29,802,-754,787,-417,-155,-735,-474,148,245,-627,662,-838,233,931,-591,173,349,988,127,656,-346,-747,-223,-949,984,928,-881,-991,-122,-68,613,183,711,88,39,-175,-880,715,302,127,818,-349,491,881,-17,-408,-569,-370,-408,5,751,-351,793,-370,-347,-969,-517,-906,-377,374,816,960,-389,532,677,-314,597,762,948,-256,-411,923,278,-688,898,137,-536,108,914,103,-446,67,617,-130,107,-10,409,414,820,636,-726,-134,-527,-744,-202,945,-485,-920,-399,822,-57,-751,-330,-54,-407,-744,-162,-674,-653,-536,-446,178,-387,545,982,310,-843,-771,-582,-411,-493,620,913,-512,207,761,-619,-968,-169,-608,339,-995,-368,-127,758,-690,-270,671,-665,501,-136,858,444,-637,-67,766,720,846,504,604,-250,-527,-975,15,518,-624,796,-134,645,-732,192,-29,-859,585,-977,-442,-339,941,347,-87,-653,-986,-36,-618,-863,-731,872,-934,260,57,-960,909,-513,382,-12,-235,503,-101,-752,235,-184,-39,-396,-702,1,-119,-929,-465,568,74,79,760,246,901,-969,953,-868,11,-821,275,-735,-674,178,-114,705,287,169,364,-907,-11,-825,905,544,-18,-900,57,646,502,231,710,-375,-194,424,-116,436,887,627,-181,2,-563,-814,-444,-156,341,-612,962,-704,930,860,-845,-704,-561,358,-734,-201,903,-717,383,856,-986,-52,995,856,-907,-536,-469,850,172,-960,-971,-74,131,758,-341,-679,574,-919,-833,850,748,-369,857,-599,-548,-896,228,35,-969,-560,-308,519,-662,-648,-468,-474,691,-102,541,597,-183,-644,-545,882,-378,-954,716,841,446,-289,818,-450,365,882,29,411,-524,306,-941,-319,-186,367,-672,608,711,0,-185,-184,871,456,-849,331,-482,-155,-896,874,-192,132,416,106,31,-234,911,520,-483,624,886,238,832,-53,-482,-709,259,100,659,690,669,-822,411,-106,638,29,-931,472,-984,748,846,798,-814,-469,-950,-243,916,4,27,-819,-739,-754,986,144,389,-570,804,-99,-438,596,759,-194,-871,-410,-578,467,475,334,-508,768,-539,916,329,-220};
		
		Sort.sort(data, (Integer a, Integer b) -> {
			if (a < b) return -1;
			if (a > b) return 1;
			return 0;
		});
		
		int[] ans = {-1000,-999,-997,-995,-995,-994,-991,-986,-986,-984,-981,-980,-977,-975,-974,-971,-969,-969,-969,-969,-969,-968,-960,-960,-960,-957,-956,-954,-954,-954,-952,-951,-951,-950,-949,-946,-941,-940,-937,-936,-935,-934,-931,-931,-929,-927,-920,-919,-917,-912,-907,-907,-906,-906,-902,-900,-900,-896,-896,-896,-894,-893,-893,-893,-892,-891,-891,-888,-882,-881,-880,-874,-873,-871,-870,-868,-866,-863,-863,-862,-859,-857,-856,-856,-849,-849,-848,-845,-843,-842,-841,-838,-837,-835,-833,-828,-827,-825,-822,-822,-821,-819,-819,-814,-814,-811,-810,-801,-801,-784,-780,-778,-775,-774,-772,-771,-771,-767,-762,-760,-758,-757,-755,-754,-754,-752,-751,-751,-748,-747,-747,-745,-744,-744,-742,-741,-739,-739,-738,-736,-735,-735,-734,-734,-733,-732,-731,-730,-726,-723,-721,-717,-714,-712,-711,-711,-710,-709,-707,-704,-704,-702,-700,-699,-697,-690,-688,-686,-686,-679,-679,-674,-674,-674,-672,-672,-671,-668,-666,-665,-663,-663,-662,-661,-661,-661,-653,-653,-648,-648,-647,-645,-644,-644,-644,-642,-640,-637,-635,-635,-627,-625,-624,-624,-623,-619,-619,-618,-612,-612,-608,-608,-607,-604,-604,-599,-596,-595,-594,-593,-591,-587,-583,-582,-578,-575,-572,-570,-570,-569,-566,-565,-563,-563,-561,-560,-559,-557,-556,-552,-550,-550,-549,-548,-548,-545,-544,-539,-536,-536,-536,-535,-534,-533,-531,-530,-527,-527,-524,-523,-517,-516,-513,-512,-508,-503,-494,-493,-489,-489,-486,-485,-483,-483,-482,-482,-481,-480,-479,-479,-475,-475,-474,-474,-469,-469,-468,-467,-467,-465,-461,-461,-458,-450,-446,-446,-445,-444,-442,-438,-438,-437,-435,-434,-429,-421,-419,-418,-417,-412,-411,-411,-411,-410,-410,-408,-408,-407,-406,-403,-399,-396,-394,-389,-389,-387,-386,-383,-378,-377,-377,-375,-375,-370,-370,-369,-368,-365,-356,-353,-351,-351,-350,-350,-349,-348,-348,-347,-346,-345,-344,-341,-341,-339,-339,-339,-336,-334,-333,-330,-322,-320,-319,-315,-314,-314,-312,-308,-306,-299,-290,-289,-280,-278,-270,-269,-266,-266,-265,-259,-256,-254,-253,-250,-249,-248,-247,-243,-243,-235,-234,-233,-225,-225,-224,-223,-221,-220,-220,-213,-213,-211,-202,-201,-200,-195,-194,-194,-192,-192,-190,-188,-188,-186,-185,-184,-184,-183,-183,-181,-177,-175,-170,-169,-166,-162,-159,-157,-156,-155,-155,-149,-148,-148,-144,-136,-136,-135,-134,-134,-132,-130,-128,-127,-122,-122,-119,-116,-116,-116,-115,-114,-107,-106,-103,-102,-102,-101,-99,-98,-98,-93,-93,-89,-87,-76,-76,-74,-68,-67,-67,-66,-62,-57,-54,-53,-52,-51,-45,-45,-43,-39,-36,-32,-29,-29,-26,-18,-17,-12,-11,-10,-9,-6,-5,-2,0,1,1,2,2,3,4,4,5,6,8,9,11,11,15,27,27,29,29,31,35,39,41,46,52,55,56,57,57,59,59,61,63,67,67,67,69,71,74,74,78,79,79,79,83,88,93,94,95,95,99,100,103,103,103,105,106,107,108,108,116,118,120,121,123,127,127,131,131,132,133,136,137,137,139,144,147,148,148,153,153,154,154,157,166,167,168,169,172,173,177,177,178,178,179,179,181,182,183,186,188,192,193,194,198,203,207,208,211,211,218,220,227,228,228,231,231,233,233,233,235,235,236,236,238,238,244,245,246,248,250,256,256,259,259,260,260,262,263,263,264,268,270,275,278,287,287,291,293,296,296,298,299,302,302,306,310,316,319,323,329,330,331,334,334,337,339,341,342,344,344,346,346,347,348,349,352,358,364,365,367,371,374,376,382,383,383,385,386,389,392,394,395,396,396,396,399,399,400,401,401,405,409,409,411,411,413,414,415,416,417,417,419,421,424,426,427,432,432,436,439,443,444,445,446,453,456,456,456,458,460,462,463,467,472,475,477,477,478,479,481,481,491,491,497,501,502,503,503,504,506,513,513,513,516,517,517,518,519,520,524,526,530,532,535,537,539,540,541,541,544,545,545,546,558,568,570,571,574,576,582,585,587,590,590,591,596,597,597,598,602,604,604,608,611,613,614,616,617,617,620,621,622,624,624,627,627,635,635,636,636,636,638,638,638,643,644,645,646,648,653,654,656,659,659,662,667,669,671,674,676,677,682,683,684,689,690,691,692,694,695,697,703,704,705,708,710,710,711,711,715,716,717,718,720,725,727,732,733,733,734,737,737,745,748,748,749,750,751,752,752,755,755,758,758,758,759,760,761,762,763,766,766,768,768,768,771,776,778,781,784,787,793,793,794,796,798,802,802,802,804,808,808,811,813,814,815,816,818,818,820,821,822,822,830,832,834,838,838,840,841,846,846,850,850,850,851,856,856,857,857,858,858,860,871,872,872,872,874,874,881,882,882,882,882,883,885,886,886,886,887,887,889,890,892,896,898,898,901,901,903,903,905,907,909,910,910,911,911,912,913,914,916,916,920,923,923,928,930,931,933,935,936,938,941,944,945,948,948,953,954,956,959,960,961,962,974,982,982,984,986,988,992,995};
	
		assertEquals(1000, data.length);
		for (int i = 0; i < ans.length; i++) {
			assertEquals(ans[i], data[i]);
		}
	}
	
	@Test
	void testDescendingNormal() {
		int[] data = {9,13,8,4,1,0,7,14,5,10};
		
		Sort.sort(data, (Integer a, Integer b) -> {
			if (a > b) return -1;
			if (a < b) return 1;
			return 0;
		});
		
		int[] ans = {14,13,10,9,8,7,5,4,1,0};
		
		assertEquals(10, data.length);
		for (int i = 0; i < ans.length; i++) {
			assertEquals(ans[i], data[i]);
		}
	}
	
	@Test
	void testDescendingComplex() {
		int[] data = {530,-693,-216,613,-567,265,-909,-695,678,-663,-923,-764,33,115,342,-793,99,617,608,-452,62,-961,-265,-584,-506,-293,241,-757,-49,-4,-371,973,-625,275,-261,500,868,245,241,-950,-762,896,-21,277,786,-716,810,628,319,431,-550,683,-600,473,-919,176,594,-617,-926,56,-179,-534,-439,429,97,-917,-75,920,-699,-625,498,-789,-687,651,592,-802,-122,-354,-7,643,-485,198,-623,921,-347,294,-10,485,-681,308,363,952,673,-152,-98,-840,-202,691,-663,35,591,-156,-765,-412,579,784,-243,550,195,342,-637,-590,558,761,136,-576,-899,232,-86,770,849,89,907,-692,426,770,933,160,7,-886,593,746,145,795,531,-250,26,-455,204,103,-678,915,-455,-204,-600,905,-189,-487,-792,100,-282,-485,-871,487,-418,809,-693,724,864,871,613,932,51,-802,-935,438,941,-865,968,-684,43,-343,127,928,832,-635,159,809,568,-606,-317,-148,24,-484,-159,871,-351,83,-474,-776,406,919,885,226,371,-263,998,703,-25,2,614,-80,627,867,85,-496,151,87,561,-16,-350,-348,-29,948,456,529,927,61,179,-944,260,806,253,22,-57,193,608,854,915,841,-678,670,-165,792,155,-264,264,-942,613,-994,-332,-249,-287,317,-139,390,874,486,-90,551,-55,-213,678,-917,20,626,593,202,771,356,986,264,486,325,-557,788,-581,-525,-973,58,-719,350,9,961,-106,-105,-425,-176,-624,143,-243,-728,51,140,-765,-50,-628,377,602,-521,-260,-746,693,-642,453,547,-313,713,254,304,-548,-237,969,64,-181,-325,295,-37,74,-859,-367,160,158,-980,-796,753,100,621,-803,449,138,106,-935,-454,-756,489,415,681,31,-412,-680,-820,8,616,-799,-884,-186,-170,-171,879,-643,366,-52,660,898,426,-782,-277,846,-196,-959,-470,449,-23,-841,-725,464,-71,-100,-761,-203,-35,-296,-863,600,970,-175,118,-906,830,818,-944,-362,160,-247,926,-382,293,-809,-600,-232,-682,-611,-270,-415,801,580,764,889,-232,685,988,-248,-416,737,-417,815,-32,893,164,720,776,-253,-284,913,-93,218,877,-51,-382,-730,-279,133,358,-947,543,551,-754,539,862,162,365,-955,-859,-625,449,-328,397,703,-628,552,-616,-274,-56,-30,843,-728,-515,-922,302,97,-866,885,203,372,-6,-809,230,-894,-19,327,-239,861,-891,-724,-822,-840,-866,-533,458,484,167,-338,419,-608,792,-294,-727,25,645,-967,-856,990,693,-144,-807,-601,267,787,278,210,-606,-173,522,-850,-736,-343,-159,-781,-831,-327,-432,914,-468,171,59,-923,-157,648,100,-7,-242,327,-681,15,243,-809,513,68,-203,-519,159,424,-789,551,-412,-293,-275,458,398,-725,45,610,271,-883,948,-273,916,-202,213,441,372,533,-789,-429,-641,837,-292,-619,693,-518,-695,574,175,954,312,-905,-506,-598,-731,-63,866,442,-783,43,726,-769,-446,-541,373,217,-190,196,-303,223,-720,-633,-126,953,292,-447,265,963,585,471,210,-390,-518,452,-354,-728,-940,-452,-788,-992,-539,-236,559,866,993,-109,-775,48,-425,359,-202,-982,788,869,777,-310,315,245,59,-222,434,353,-359,80,-447,818,-884,-494,-802,776,-619,59,-590,162,865,-834,-275,-507,292,277,206,-861,376,748,-731,-901,97,-372,570,810,-842,-424,-987,-218,73,899,192,-358,-549,55,-123,-663,-539,869,-216,736,388,987,-154,-114,-133,99,996,-45,-288,249,-336,-410,181,825,465,483,-32,187,696,95,238,598,687,-693,-419,-900,-411,-894,634,509,-704,256,649,-748,-806,218,-194,-205,-70,406,935,401,675,-651,-436,645,369,-328,609,-18,544,-908,-736,985,485,-375,-676,208,-463,612,-859,352,655,-477,-892,-218,-648,-321,-208,510,-180,-111,423,695,-973,-457,65,252,-385,59,-935,-437,420,-410,-307,-244,-775,256,-479,325,-15,-533,348,46,-575,-354,149,-307,825,-538,-749,-758,-808,-464,-340,-388,-515,11,-255,461,17,999,529,-423,-311,929,-663,913,-613,819,425,-912,-881,-679,262,277,945,505,380,-11,-115,-313,-90,-139,-417,-717,614,277,774,547,987,463,-455,314,279,773,-183,698,307,65,-122,306,-516,-881,-857,606,-743,-46,782,-537,74,517,810,400,259,263,938,162,337,-133,-156,-608,-520,-304,-212,778,466,603,692,-499,242,127,120,870,554,114,-596,583,-357,711,360,637,-43,65,-19,-562,-853,-497,11,223,858,-352,-622,103,974,-810,768,653,16,265,-959,376,-219,-259,-244,-527,-607,590,-123,-153,-266,-435,-248,-647,905,-655,-583,491,-588,398,233,-261,-23,753,-973,-851,-829,700,946,559,354,-951,481,533,850,-483,60,-184,-724,742,701,-212,-652,675,258,452,-457,-46,-238,764,47,737,-936,727,-256,-953,-400,-22,709,-284,570,126,-378,-140,878,-804,-717,697,249,903,-412,19,647,846,250,38,840,717,395,-813,134,-276,761,-300,-7,416,838,-735,-29,-867,387,-625,-781,-542,989,-708,812,211,3,558,-167,-405,-909,-147,-592,734,-759,794,-754,188,625,-320,460,108,63,969,336,805,-369,645,-960,-237,792,-321,-743,213,-538,-543,-436,293,89,729,-254,367,211,-689,528,299,-809};
		
		Sort.sort(data, (Integer a, Integer b) -> {
			if (a > b) return -1;
			if (a < b) return 1;
			return 0;
		});
		
		int[] ans = {999,998,996,993,990,989,988,987,987,986,985,974,973,970,969,969,968,963,961,954,953,952,948,948,946,945,941,938,935,933,932,929,928,927,926,921,920,919,916,915,915,914,913,913,907,905,905,903,899,898,896,893,889,885,885,879,878,877,874,871,871,870,869,869,868,867,866,866,865,864,862,861,858,854,850,849,846,846,843,841,840,838,837,832,830,825,825,819,818,818,815,812,810,810,810,809,809,806,805,801,795,794,792,792,792,788,788,787,786,784,782,778,777,776,776,774,773,771,770,770,768,764,764,761,761,753,753,748,746,742,737,737,736,734,729,727,726,724,720,717,713,711,709,703,703,701,700,698,697,696,695,693,693,693,692,691,687,685,683,681,678,678,675,675,673,670,660,655,653,651,649,648,647,645,645,645,643,637,634,628,627,626,625,621,617,616,614,614,613,613,613,612,610,609,608,608,606,603,602,600,598,594,593,593,592,591,590,585,583,580,579,574,570,570,568,561,559,559,558,558,554,552,551,551,551,550,547,547,544,543,539,533,533,531,530,529,529,528,522,517,513,510,509,505,500,498,491,489,487,486,486,485,485,484,483,481,473,471,466,465,464,463,461,460,458,458,456,453,452,452,449,449,449,442,441,438,434,431,429,426,426,425,424,423,420,419,416,415,406,406,401,400,398,398,397,395,390,388,387,380,377,376,376,373,372,372,371,369,367,366,365,363,360,359,358,356,354,353,352,350,348,342,342,337,336,327,327,325,325,319,317,315,314,312,308,307,306,304,302,299,295,294,293,293,292,292,279,278,277,277,277,277,275,271,267,265,265,265,264,264,263,262,260,259,258,256,256,254,253,252,250,249,249,245,245,243,242,241,241,238,233,232,230,226,223,223,218,218,217,213,213,211,211,210,210,208,206,204,203,202,198,196,195,193,192,188,187,181,179,176,175,171,167,164,162,162,162,160,160,160,159,159,158,155,151,149,145,143,140,138,136,134,133,127,127,126,120,118,115,114,108,106,103,103,100,100,100,99,99,97,97,97,95,89,89,87,85,83,80,74,74,73,68,65,65,65,64,63,62,61,60,59,59,59,59,58,56,55,51,51,48,47,46,45,43,43,38,35,33,31,26,25,24,22,20,19,17,16,15,11,11,9,8,7,3,2,-4,-6,-7,-7,-7,-10,-11,-15,-16,-18,-19,-19,-21,-22,-23,-23,-25,-29,-29,-30,-32,-32,-35,-37,-43,-45,-46,-46,-49,-50,-51,-52,-55,-56,-57,-63,-70,-71,-75,-80,-86,-90,-90,-93,-98,-100,-105,-106,-109,-111,-114,-115,-122,-122,-123,-123,-126,-133,-133,-139,-139,-140,-144,-147,-148,-152,-153,-154,-156,-156,-157,-159,-159,-165,-167,-170,-171,-173,-175,-176,-179,-180,-181,-183,-184,-186,-189,-190,-194,-196,-202,-202,-202,-203,-203,-204,-205,-208,-212,-212,-213,-216,-216,-218,-218,-219,-222,-232,-232,-236,-237,-237,-238,-239,-242,-243,-243,-244,-244,-247,-248,-248,-249,-250,-253,-254,-255,-256,-259,-260,-261,-261,-263,-264,-265,-266,-270,-273,-274,-275,-275,-276,-277,-279,-282,-284,-284,-287,-288,-292,-293,-293,-294,-296,-300,-303,-304,-307,-307,-310,-311,-313,-313,-317,-320,-321,-321,-325,-327,-328,-328,-332,-336,-338,-340,-343,-343,-347,-348,-350,-351,-352,-354,-354,-354,-357,-358,-359,-362,-367,-369,-371,-372,-375,-378,-382,-382,-385,-388,-390,-400,-405,-410,-410,-411,-412,-412,-412,-412,-415,-416,-417,-417,-418,-419,-423,-424,-425,-425,-429,-432,-435,-436,-436,-437,-439,-446,-447,-447,-452,-452,-454,-455,-455,-455,-457,-457,-463,-464,-468,-470,-474,-477,-479,-483,-484,-485,-485,-487,-494,-496,-497,-499,-506,-506,-507,-515,-515,-516,-518,-518,-519,-520,-521,-525,-527,-533,-533,-534,-537,-538,-538,-539,-539,-541,-542,-543,-548,-549,-550,-557,-562,-567,-575,-576,-581,-583,-584,-588,-590,-590,-592,-596,-598,-600,-600,-600,-601,-606,-606,-607,-608,-608,-611,-613,-616,-617,-619,-619,-622,-623,-624,-625,-625,-625,-625,-628,-628,-633,-635,-637,-641,-642,-643,-647,-648,-651,-652,-655,-663,-663,-663,-663,-676,-678,-678,-679,-680,-681,-681,-682,-684,-687,-689,-692,-693,-693,-693,-695,-695,-699,-704,-708,-716,-717,-717,-719,-720,-724,-724,-725,-725,-727,-728,-728,-728,-730,-731,-731,-735,-736,-736,-743,-743,-746,-748,-749,-754,-754,-756,-757,-758,-759,-761,-762,-764,-765,-765,-769,-775,-775,-776,-781,-781,-782,-783,-788,-789,-789,-789,-792,-793,-796,-799,-802,-802,-802,-803,-804,-806,-807,-808,-809,-809,-809,-809,-810,-813,-820,-822,-829,-831,-834,-840,-840,-841,-842,-850,-851,-853,-856,-857,-859,-859,-859,-861,-863,-865,-866,-866,-867,-871,-881,-881,-883,-884,-884,-886,-891,-892,-894,-894,-899,-900,-901,-905,-906,-908,-909,-909,-912,-917,-917,-919,-922,-923,-923,-926,-935,-935,-935,-936,-940,-942,-944,-944,-947,-950,-951,-953,-955,-959,-959,-960,-961,-967,-973,-973,-973,-980,-982,-987,-992,-994};
		
		assertEquals(1000, data.length);
		for (int i = 0; i < ans.length; i++) {
			assertEquals(ans[i], data[i]);
		}
	}
	
	@Test
	void testAbsoluteIncrement() {
		int[] data = {-9, -7, -5, -3, -1, 0, 6, 4, 2, 8};
		
		Sort.sort(data, (Integer a, Integer b) -> {
			if (Math.abs(a) < Math.abs(b)) return -1;
			if (Math.abs(a) > Math.abs(b)) return 1;
			return 0;
		});
		
		int[] ans = {0, -1, 2, -3, 4, -5, 6, -7, 8, -9};
		
		assertEquals(10, data.length);
		for (int i = 0; i < ans.length; i++) {
			assertEquals(ans[i], data[i]);
		}
	}
	
	@Test
	void testAbsoluteDecrement() {
		int[] data = {-9, -7, -5, -3, -1, 0, 6, 4, 2, 8};
		
		Sort.sort(data, (Integer a, Integer b) -> {
			if (Math.abs(a) > Math.abs(b)) return -1;
			if (Math.abs(a) < Math.abs(b)) return 1;
			return 0;
		});
		
		int[] ans = {-9, 8, -7, 6, -5, 4, -3, 2, -1, 0};
		
		assertEquals(10, data.length);
		for (int i = 0; i < ans.length; i++) {
			assertEquals(ans[i], data[i]);
		}
	}
	
}
